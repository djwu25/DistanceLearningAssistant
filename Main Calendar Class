package distance.learning.assistant;

import java.awt.Insets;
import java.time.DayOfWeek;
import static java.time.DayOfWeek.FRIDAY;
import static java.time.DayOfWeek.MONDAY;
import static java.time.DayOfWeek.SATURDAY;
import static java.time.DayOfWeek.SUNDAY;
import static java.time.DayOfWeek.THURSDAY;
import static java.time.DayOfWeek.TUESDAY;
import static java.time.DayOfWeek.WEDNESDAY;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.HPos;
import javafx.geometry.Pos;
import javafx.geometry.VPos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.TextAlignment;
import javafx.stage.Modality;
import javafx.stage.Stage;

/**
 *
 * @author duke
 */
public class DistanceLearningAssistant extends Application implements EventHandler<ActionEvent>{
    
    private final List<DaySlot> days = new ArrayList<>();
    
    private HashMap<Integer, ArrayList<Appointment>> data = new HashMap<Integer, ArrayList<Appointment>>();
    
    private YearMonth month = YearMonth.now();
    private Label monthTitle;
    private Button next, previous, create, delete, openCreateMenu, openDeleteMenu;
    private GridPane calendar;
    private Stage stage, createMenu, deleteMenu;
    private TextField nameTf, timeTf, timeDl, nameDl;
    private ChoiceBox timeCb, monthCb, dayCb, timeCbDl, monthDl, dayDl;
    
    @Override
    public void start(Stage primaryStage) {
        calendar = new GridPane();
        stage = primaryStage;
        
        next = new Button();
        next.setText("NEXT");
        previous = new Button();
        previous.setText("PREVIOUS");
        
        next.setOnAction(this);
        previous.setOnAction(this);
        
        setUp(calendar);
        
        calendar.setGridLinesVisible(true);
        ScrollPane scroll = new ScrollPane(calendar);
        StackPane buttons = new StackPane(scroll);
        buttons.getChildren().addAll(next, previous, monthTitle);
        StackPane.setAlignment(next, Pos.TOP_RIGHT);
        StackPane.setAlignment(previous, Pos.TOP_LEFT);
        StackPane.setAlignment(monthTitle, Pos.TOP_CENTER);
        
        VBox calendarButtons = new VBox(buttons, scroll);
        calendarButtons.setSpacing(10);
        calendarButtons.setMaxWidth(1010);
        VBox appointments = new VBox();
        openCreateMenu = new Button();
        openCreateMenu.setText("CREATE APPOINTMENT");
        openDeleteMenu = new Button();
        openDeleteMenu.setText("DELETE APPOINTMENT");
        appointments.getChildren().addAll(openCreateMenu, openDeleteMenu);
        appointments.setAlignment(Pos.CENTER);
        appointments.setMinWidth(375);
        appointments.setSpacing(10);
        appointments.setMaxHeight(800);
        
        openCreateMenu.setOnAction(this);
        openDeleteMenu.setOnAction(this);
        
        HBox full = new HBox(appointments, calendarButtons);
        full.setSpacing(50);
        calendarButtons.setAlignment(Pos.CENTER_RIGHT);
        
        Scene scene = new Scene(full, 1500, 1000);
        
        stage.setTitle("Distance Learning Assistant " + month.getYear());
        stage.setScene(scene);
        stage.show();
    }
    
    private void setUp( GridPane view ) {
        DateTimeFormatter monthFormat = DateTimeFormatter.ofPattern("MMM");
        monthTitle = new Label(month.format(monthFormat));
        
        DateTimeFormatter format = DateTimeFormatter.ofPattern("E\nd");
        int count = 1;
        
        CalendarTree tree = new CalendarTree();
        
        while( month.isValidDay(count) ) {
            LocalDate date = month.atDay(count);
            tree.add(date);
            count++;
        }
        
        for( int row = 0; row < 7; row++ ) {
            for( int column = 0; column < 7; column++ ) {
                if( !tree.isEmpty() ) {
                    LocalDate date = (LocalDate)tree.top();
                    if( date.getDayOfWeek().equals(getDayOfWeek(column))) {
                        DaySlot daySlot = new DaySlot(date);
                        days.add(daySlot);
                        view.addRow(row, daySlot.getView());
                        tree.remove();
                    }
                }
            }
        }
        
        count = 1;
        for( int row = 0; row < 7; row++ ) {
            for( int column = 0; column < 7; column++ ) {
                if( month.isValidDay(count) ) {
                    LocalDate date = month.atDay(count);
                    if( date.getDayOfWeek().equals(getDayOfWeek(column)) ) {
                        Label label = new Label(date.format(format));
                        label.setTextAlignment(TextAlignment.CENTER);
                        VBox dayPane = new VBox(label);
                        ArrayList<Appointment> sort = dayOfAppointments(count);
                        for( Appointment appoint: sort ) {
                            Label app = new Label("" + appoint.getHour() + ":" + 
                                    appoint.getMinutes() + " -> " + appoint.getName() );
                            app.setTextAlignment(TextAlignment.CENTER);
                            GridPane.setHalignment(app, HPos.CENTER);
                            dayPane.getChildren().add(app);
                        }
                        dayPane.setSpacing(5);
                        dayPane.setAlignment(Pos.TOP_CENTER);
                        view.add( dayPane, column, row );
                        count++;
                    }
                }
            }
        }
    }
    
    private ArrayList<Appointment> dayOfAppointments( int day ) {
        int yearDay = getDaysBeforeMonth(month.getMonth()) + day;
        ArrayList<Appointment> appointments = new ArrayList<>();
        
        if( data.containsKey(yearDay) ) {
            appointments = data.get(yearDay);
            if( appointments.size() == 1 )
                return appointments;
            for( int i = 0; i < appointments.size(); i++ ) {
                Appointment swap = appointments.get(i);
                for( int j = i; j < appointments.size(); j++ ) {
                    if( appointments.get(i).getTotalMin() > appointments.get(j).getTotalMin() ) {
                        swap = appointments.get(j);
                        appointments.set(j, appointments.get(i));
                    }
                }
                appointments.set(i, swap);
            }
        }
        return appointments;
    }
    
    private DayOfWeek getDayOfWeek( int column ) {
        switch( column ) {
            case 0:
                return SUNDAY;
            case 1:
                return MONDAY;
            case 2:
                return TUESDAY;
            case 3:
                return WEDNESDAY;
            case 4:
                return THURSDAY;
            case 5:
                return FRIDAY;
            case 6:
                return SATURDAY;
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void handle(ActionEvent event) {
        if( event.getSource() == next ) {
            month = month.plusMonths(1);
            start(stage);
        } else if( event.getSource() == previous ) {
            month = month.minusMonths(1);
            start(stage);
        } else if (event.getSource() == openCreateMenu) {
            handleOpenCreateMenu();
        } else if ( event.getSource() == openDeleteMenu ) {
            handleOpenDeleteMenu();
        } else if (event.getSource() == delete) {
            handleDelete();
        } else if (event.getSource() == create) {
            handleCreate();
        }
    }
    
    public void handleOpenDeleteMenu() {
        deleteMenu = new Stage();
        deleteMenu.initModality(Modality.APPLICATION_MODAL);
        deleteMenu.initOwner(stage);
        
        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        
        nameDl = new TextField();
        nameDl.setPromptText("Name:");
        grid.add(nameDl, 0, 0);
        
        timeDl = new TextField();
        timeDl.setPromptText("hh:mm");
        grid.add(timeDl, 0, 1);
        
        timeCbDl = new ChoiceBox(FXCollections.observableArrayList("AM", "PM"));
        grid.add(timeCbDl, 1, 1);
        
        monthDl = new ChoiceBox(FXCollections.observableArrayList(Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE, Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER));
        grid.add(monthDl, 0, 2);
        
        dayDl = new ChoiceBox(FXCollections.observableArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31));
        grid.add(dayDl, 1, 2);
        
        delete = new Button();
        delete.setText("DELETE APPOINTMENT");
        delete.setOnAction(this);
        grid.add(delete, 0, 3);

        Scene dialogScene = new Scene(grid, 300, 150);        
        deleteMenu.setScene(dialogScene);
        deleteMenu.show();
    }
    
    public void handleOpenCreateMenu() {
        createMenu = new Stage();
        createMenu.initModality(Modality.APPLICATION_MODAL);
        createMenu.initOwner(stage);
        
        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        
        nameTf = new TextField();
        nameTf.setPromptText("Name:");
        grid.add(nameTf, 0, 0);
        
        timeTf = new TextField();
        timeTf.setPromptText("hh:mm");
        grid.add(timeTf, 0, 1);
        
        timeCb = new ChoiceBox(FXCollections.observableArrayList("AM", "PM"));
        grid.add(timeCb, 1, 1);
        
        monthCb = new ChoiceBox(FXCollections.observableArrayList(Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE, Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER));
        grid.add(monthCb, 0, 2);
        
        dayCb = new ChoiceBox(FXCollections.observableArrayList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31));
        grid.add(dayCb, 1, 2);
        
        create = new Button();
        create.setText("CREATE APPOINTMENT");
        create.setOnAction(this);
        grid.add(create, 0, 3);

        Scene dialogScene = new Scene(grid, 300, 200);        
        createMenu.setScene(dialogScene);
        createMenu.show();
    }
    
    public void handleDelete() {
        String[] timeData = getDeleteTime();
        
        if( timeData[0].equals("0") && timeData[1].equals("0") ) {
            Stage errorMsg = new Stage();
            Label label = new Label("Invalid Time Input\nNeeds to be HH:MM");
            label.setAlignment(Pos.CENTER);
            StackPane error = new StackPane(label);
            errorMsg.setTitle("ERROR");
            Scene scene = new Scene( error, 200, 100 );
            errorMsg.setScene(scene);
            errorMsg.show();
            return;
        }
        
        int key = getKeyForDate((Month)monthDl.getValue(), (Integer)dayDl.getValue());
        if (data.containsKey(key)) {
            ArrayList<Appointment> list = data.get(key);
            int initialSize = list.size();
            for( int i = 0; i < list.size(); i++ ) {
                if( list.get(i).getName().equals(nameDl.getText()) && list.get(i).getHour() == Integer.parseInt(timeData[0]) 
                        && list.get(i).getMinutes().equals(timeData[1]) ) 
                    list.remove(list.get(i--));
            }
            if( initialSize == list.size() ) {
                Stage errorMsg = new Stage();
                Label label = new Label("No Appointment Found");
                label.setAlignment(Pos.CENTER);
                StackPane error = new StackPane(label);
                errorMsg.setTitle("ERROR");
                Scene scene = new Scene( error, 200, 100 );
                errorMsg.setScene(scene);
                errorMsg.show();
                return;
            }
            data.put(key, list);
        } else {
            Stage errorMsg = new Stage();
            Label label = new Label("No Appointments On That Day");
            label.setAlignment(Pos.CENTER);
            StackPane error = new StackPane(label);
            errorMsg.setTitle("ERROR");
            Scene scene = new Scene( error, 200, 100 );
            errorMsg.setScene(scene);
            errorMsg.show();
            return;
        }
        deleteMenu.close();
        start(stage);
        Stage validMsg = new Stage();
        Label label = new Label("Appointment Deleted");
        label.setAlignment(Pos.CENTER);
        StackPane deleted = new StackPane(label);
        validMsg.setTitle("Deleted");
        Scene scene = new Scene( deleted, 200, 100 );
        validMsg.setScene(scene);
        validMsg.show();
    }
    
    public void handleCreate() {
        Appointment a = new Appointment();
        
        String[] timeData = getCreateTime();
        
        if( timeData[0].equals("0") && timeData[1].equals("0") ) {
            Stage errorMsg = new Stage();
            Label label = new Label("Invalid Time Input\nNeeds to be HH:MM");
            label.setAlignment(Pos.CENTER);
            StackPane error = new StackPane(label);
            errorMsg.setTitle("ERROR");
            Scene scene = new Scene( error, 200, 100 );
            errorMsg.setScene(scene);
            errorMsg.show();
            return;
        }
        
        a.setHour(Integer.parseInt(timeData[0]));
        a.setMinutes(timeData[1]);
        
        a.setName(nameTf.getText());
        a.setMonth((Month) monthCb.getValue());
        a.setDay((Integer) dayCb.getValue());
        
        int key = getKeyForDate(a.getMonth(), a.getDay());
        if (data.containsKey(key)) {
            data.get(key).add(a);
        } else {
            ArrayList<Appointment> arr = new ArrayList<Appointment>();
            arr.add(a);
            data.put(key, arr);
        }
        createMenu.close();
        start(stage);
    }
    
    public String[] getDeleteTime() {
        String[] timeData = new String[2];
        String timeString = timeDl.getText();
        
        // check for errors
        if (timeString.length() != 5 || timeString.charAt(2) != ':' ) {
            timeData[0] = "0";
            timeData[1] = "0";
            return timeData;
        }
        
        timeData[0] = timeString.substring(0, 2);
        timeData[1] = timeString.substring(3, 5);
        
        if(timeCbDl.getValue() == "PM") {
            timeData[0] = "" + (Integer.parseInt(timeData[0]) + 12);
        }
        
        if(timeData[0].equals("12") && timeCbDl.getValue() == "AM") {
            timeData[0] = "00";
        }
        
        return timeData;
    }
    
    public String[] getCreateTime() {
        String[] timeData = new String[2];
        String timeString = timeTf.getText();
        
        // check for errors
        if (timeString.length() != 5 || timeString.charAt(2) != ':' ) {
            timeData[0] = "0";
            timeData[1] = "0";
            return timeData;
        }
        
        timeData[0] = timeString.substring(0, 2);
        timeData[1] = timeString.substring(3, 5);
        
        if(timeCb.getValue() == "PM") {
            timeData[0] = "" + (Integer.parseInt(timeData[0]) + 12);
        }
        
        if(timeData[0].equals("12") && timeCb.getValue() == "AM") {
            timeData[0] = "00";
        }
        
        return timeData;
    }
    
    public int getKeyForDate(Month month, int day) {
        return getDaysBeforeMonth(month) + day;
    }
    
    public int getDaysBeforeMonth(Month month) {
        LocalDate dateBefore = LocalDate.of(2020, Month.JANUARY, 1);
        LocalDate dateAfter = LocalDate.of(2020, month, 1);
        return (int) ChronoUnit.DAYS.between(dateBefore, dateAfter);
    }
   
}
